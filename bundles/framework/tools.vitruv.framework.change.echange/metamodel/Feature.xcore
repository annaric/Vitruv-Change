@Ecore(nsURI="http://tools.vitruv/EChange/Feature/1.0")
@GenModel(modelName="Change", commentFormatting="true", featureMapWrapperInternalInterface="", classNamePattern="") //@GenModel(editDirectory="/tools.vitruv.framework.change.echange.edit/src", editorDirectory="/tools.vitruv.framework.change.echange.editor/src", modelName="Change", modelPluginClass="", editPluginClass="tools.vitruv.framework.change.provider.ChangeEditPlugin", editorPluginClass="tools.vitruv.framework.change.echange.presentation.ChangeEditorPlugin", testsDirectory="tools.vitruv.framework.change.echange.tests/src", testSuiteClass="tools.vitruv.framework.change.echange.tests.ChangeAllTests", importerID="org.eclipse.emf.importer.ecore", editorPluginID="tools.vitruv.framework.change.echange.editor", testsPluginID="tools.vitruv.framework.change.echange.tests")
package tools.vitruv.framework.change.echange.feature

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.emf.ecore.resource.ResourceSet
import tools.vitruv.framework.change.echange.util.EChangeUtil
import tools.vitruv.framework.change.echange.AtomicEChange

type EObj wraps EObject
type EFeat wraps EStructuralFeature 
type ResourceSet wraps ResourceSet

abstract class FeatureEChange<A extends EObj, F extends EFeat> extends AtomicEChange {
	refers F[1] affectedFeature
	refers A[1] affectedEObject 
	
	op boolean isResolved() {
		return super.isResolved && affectedEObject != null 
		&& !affectedEObject.eIsProxy && affectedFeature != null
	}
	
	op boolean resolveBefore(ResourceSet resourceSet) {
		if (!isResolved) {		
			var resolvedAffectedEObject = EChangeUtil.resolveProxy(affectedEObject, resourceSet) as A
			// Don't change the references before everything (current and super class proxies) 
			// was successfully resolved.
			if (affectedFeature == null || resolvedAffectedEObject == null 
				|| resolvedAffectedEObject.eIsProxy || !super.resolveBefore(resourceSet)) {
				return false
			}

			affectedEObject = resolvedAffectedEObject
		}
		return true
	}
}

abstract class UpdateMultiValuedFeatureEChange<A extends EObj , F extends EFeat> extends FeatureEChange<A, F> {
}

abstract class UpdateSingleValuedFeatureEChange<A extends EObj , F extends EFeat> extends FeatureEChange<A, F> {
}