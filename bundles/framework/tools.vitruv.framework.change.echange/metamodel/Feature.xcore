@Ecore(nsURI="http://tools.vitruv/EChange/Feature/1.0")
@GenModel(modelName="Change", commentFormatting="true", featureMapWrapperInternalInterface="", classNamePattern="") //@GenModel(editDirectory="/tools.vitruv.framework.change.echange.edit/src", editorDirectory="/tools.vitruv.framework.change.echange.editor/src", modelName="Change", modelPluginClass="", editPluginClass="tools.vitruv.framework.change.provider.ChangeEditPlugin", editorPluginClass="tools.vitruv.framework.change.echange.presentation.ChangeEditorPlugin", testsDirectory="tools.vitruv.framework.change.echange.tests/src", testSuiteClass="tools.vitruv.framework.change.echange.tests.ChangeAllTests", importerID="org.eclipse.emf.importer.ecore", editorPluginID="tools.vitruv.framework.change.echange.editor", testsPluginID="tools.vitruv.framework.change.echange.tests")
package tools.vitruv.framework.change.echange.feature

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.emf.ecore.util.EcoreUtil
import tools.vitruv.framework.change.echange.EChange
import tools.vitruv.framework.change.echange.AtomicEChange

type EObj wraps EObject
type EFeat wraps EStructuralFeature 
type ResourceSet wraps ResourceSet

abstract class FeatureEChange<A extends EObj, F extends EFeat> extends AtomicEChange {
	refers F[1] affectedFeature
	refers A[1] affectedEObject 
	
	op boolean isResolved() {
		return affectedEObject != null && !affectedEObject.eIsProxy()
	}
	
	op EChange resolve(ResourceSet resourceSet) {
		if (affectedEObject == null || affectedFeature == null) {
			return null
		}
		if (!isResolved) {
			val resolvedChange = super.resolve(resourceSet) as FeatureEChange<A, F>
			if (resolvedChange == null) {
				return null
			}
			resolvedChange.affectedEObject = EcoreUtil.resolve(affectedEObject, resourceSet) as A;
			if (resolvedChange.affectedEObject.eIsProxy) {
				return this
			}
			return resolvedChange
		}
		return this
	}
}

abstract class UpdateMultiValuedFeatureEChange<A extends EObj , F extends EFeat> extends FeatureEChange<A, F> {
}

abstract class UpdateSingleValuedFeatureEChange<A extends EObj , F extends EFeat> extends FeatureEChange<A, F> {
}