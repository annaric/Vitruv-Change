@Ecore(nsURI="http://tools.vitruv/EChange/Root/1.0")
@GenModel(modelName="Change") //@GenModel(editDirectory="/tools.vitruv.framework.change.echange.edit/src", editorDirectory="/tools.vitruv.framework.change.echange.editor/src", modelName="Change", modelPluginClass="", editPluginClass="tools.vitruv.framework.change.provider.ChangeEditPlugin", editorPluginClass="tools.vitruv.framework.change.echange.presentation.ChangeEditorPlugin", testsDirectory="tools.vitruv.framework.change.echange.tests/src", testSuiteClass="tools.vitruv.framework.change.echange.tests.ChangeAllTests", importerID="org.eclipse.emf.importer.ecore", editorPluginID="tools.vitruv.framework.change.echange.editor", testsPluginID="tools.vitruv.framework.change.echange.tests")
package tools.vitruv.framework.change.echange.root

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.Resource
import tools.vitruv.framework.change.echange.AtomicEChange
import tools.vitruv.framework.change.echange.eobject.EObjectAddedEChange
import tools.vitruv.framework.change.echange.eobject.EObjectSubtractedEChange

type EObj wraps EObject
type Resource wraps Resource

abstract class RootEChange extends AtomicEChange {
	String uri
	Resource resource
	int index
	
	op boolean isResolved() {
		return super.isResolved && resource != null
	}
}

class InsertRootEObject<T extends EObj> extends RootEChange, EObjectAddedEChange<T> {
	/**
	 * Returns if all proxy EObjects of the change are resolved to concrete EObjects of a resource set.
	 * Needs to be true to apply the change.
	 * @return	All proxy EObjects are resolved to concrete EObjects.
	 */
	op boolean isResolved() {
		return super.isResolved && newValue != null && !newValue.eIsProxy
	}
}

class RemoveRootEObject<T extends EObj> extends RootEChange, EObjectSubtractedEChange<T> {
	/**
	 * Returns if all proxy EObjects of the change are resolved to concrete EObjects of a resource set.
	 * Needs to be true to apply the change.
	 * @return	All proxy EObjects are resolved to concrete EObjects.
	 */
	op boolean isResolved() {
		return super.isResolved && oldValue != null && !oldValue.eIsProxy()
	}
}