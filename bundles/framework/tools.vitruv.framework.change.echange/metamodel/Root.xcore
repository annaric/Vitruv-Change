@Ecore(nsURI="http://tools.vitruv/EChange/Root/1.0")
@GenModel(modelName="Change") //@GenModel(editDirectory="/tools.vitruv.framework.change.echange.edit/src", editorDirectory="/tools.vitruv.framework.change.echange.editor/src", modelName="Change", modelPluginClass="", editPluginClass="tools.vitruv.framework.change.provider.ChangeEditPlugin", editorPluginClass="tools.vitruv.framework.change.echange.presentation.ChangeEditorPlugin", testsDirectory="tools.vitruv.framework.change.echange.tests/src", testSuiteClass="tools.vitruv.framework.change.echange.tests.ChangeAllTests", importerID="org.eclipse.emf.importer.ecore", editorPluginID="tools.vitruv.framework.change.echange.editor", testsPluginID="tools.vitruv.framework.change.echange.tests")
package tools.vitruv.framework.change.echange.root

import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.ResourceSet
import tools.vitruv.framework.change.echange.AtomicEChange
import tools.vitruv.framework.change.echange.EChange
import tools.vitruv.framework.change.echange.eobject.EObjectAddedEChange
import tools.vitruv.framework.change.echange.eobject.EObjectSubtractedEChange
import tools.vitruv.framework.change.echange.util.EChangeUtil

type EObj wraps EObject
type ResourceSet wraps ResourceSet
type Resource wraps Resource
type URI wraps URI

abstract class RootEChange extends AtomicEChange {
	URI uri
	Resource resource
	int index
	op boolean isResolved() {
		return super.isResolved && resource != null
	}
	op EChange resolveApply(ResourceSet resourceSet) {
		resolve(resourceSet, true)
	}
	op EChange resolveRevert(ResourceSet resourceSet) {
		resolve(resourceSet, false)
	}
	op EChange resolve(ResourceSet resourceSet, boolean applicableChange) {
		if (!isResolved) {
			val resolvedChange = super.resolveApply(resourceSet) as RootEChange
			if (resolvedChange == null) {
				// Resolving the super class attributes failed
				return null
			}
			
			// Get resource where the root object will be inserted / removed.
			resolvedChange.resource = resourceSet.getResource(uri, false)
			
			if (resolvedChange.resource != null) {
				return resolvedChange
			}
		}
		return this
	}
}

class InsertRootEObject<T extends EObj> extends RootEChange, EObjectAddedEChange<T> {
	op boolean isResolved() {
		return super.isResolved && !newValue.eIsProxy
	}
	op EChange resolve(ResourceSet resourceSet, boolean applyChange) {
		if (!isResolved) {
			val resolvedChange = super.resolve(resourceSet, applyChange) as InsertRootEObject<T>
			if (resolvedChange == null) {
				// Resolving the super class attributes failed
				return null
			}
			
			// Resolve the root object
			if (applyChange) {
				// Root was / will be created and reference is stored in static attribute.
				resolvedChange.newValue = EChangeUtil.objectInProgress as T
			} else {
				// Root object was already inserted (=> change can be reverted)
				resolvedChange.newValue = EChangeUtil.resolveProxy(newValue, resourceSet) as T
			}
	
			if (resolvedChange.newValue != null && !resolvedChange.newValue.eIsProxy) {
				if (applyChange) {
					EChangeUtil.objectInProgress = null
				} else {
					EChangeUtil.objectInProgress = resolvedChange.newValue
				}
				
				return resolvedChange
			}
		}
		return this
	}
}

class RemoveRootEObject<T extends EObj> extends RootEChange, EObjectSubtractedEChange<T> {
	op boolean isResolved() {
		return super.isResolved && !oldValue.eIsProxy()
	}
	op EChange resolve(ResourceSet resourceSet, boolean applyChange) {
		if (!isResolved) {
			val resolvedChange = super.resolve(resourceSet, applyChange) as RemoveRootEObject<T>
			if (resolvedChange == null) {
				// Resolving the super class attributes failed
				return null
			}
			
			// Resolve the root object
			if (applyChange) {
				// Root object is still in resource (=> change can be applied)
				resolvedChange.oldValue = EChangeUtil.resolveProxy(oldValue, resourceSet) as T
			} else  {
				// Root object was removed and is in the staging area (=> change can be reverted)
				resolvedChange.oldValue = EChangeUtil.objectInProgress as T
			}
					
			if (resolvedChange.oldValue != null && !resolvedChange.oldValue.eIsProxy) {
				if (applyChange) {
					EChangeUtil.objectInProgress = resolvedChange.oldValue
				} else {
					EChangeUtil.objectInProgress = null
				}
				return resolvedChange
			}
		}
		return this
	}
}