@Ecore(nsURI="http://tools.vitruv/EChange/Root/1.0")
@GenModel(modelName="Change") //@GenModel(editDirectory="/tools.vitruv.framework.change.echange.edit/src", editorDirectory="/tools.vitruv.framework.change.echange.editor/src", modelName="Change", modelPluginClass="", editPluginClass="tools.vitruv.framework.change.provider.ChangeEditPlugin", editorPluginClass="tools.vitruv.framework.change.echange.presentation.ChangeEditorPlugin", testsDirectory="tools.vitruv.framework.change.echange.tests/src", testSuiteClass="tools.vitruv.framework.change.echange.tests.ChangeAllTests", importerID="org.eclipse.emf.importer.ecore", editorPluginID="tools.vitruv.framework.change.echange.editor", testsPluginID="tools.vitruv.framework.change.echange.tests")
package tools.vitruv.framework.change.echange.root

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.common.util.URI
import tools.vitruv.framework.change.echange.util.EChangeUtil
import tools.vitruv.framework.change.echange.EChange
import tools.vitruv.framework.change.echange.AtomicEChange
import tools.vitruv.framework.change.echange.eobject.EObjectAddedEChange
import tools.vitruv.framework.change.echange.eobject.EObjectSubtractedEChange

type EObj wraps EObject
type ResourceSet wraps ResourceSet
type Resource wraps Resource
type URI wraps URI

abstract class RootEChange extends AtomicEChange {
	URI uri // TODO Stefan
	Resource resource // TODO Stefan
	int index
}

class InsertRootEObject<T extends EObj> extends RootEChange, EObjectAddedEChange<T> {
	op boolean isResolved() {
		return !newValue.eIsProxy() && resource != null
	}
	op EChange resolve(ResourceSet resourceSet) {
		return this.resolve(resourceSet, null)
	}
	op EChange resolve(ResourceSet resourceSet, T newRootObject) {
		if (!isResolved) {
			val resolvedChange = super.resolve(resourceSet) as InsertRootEObject<T>
			if (resolvedChange == null) {
				// Resolving the super class attributes failed
				return null
			}
			
			// Resolve the root object
			if (newRootObject == null) {
				// In given resource set
				resolvedChange.newValue = EChangeUtil.resolveProxy(newValue, resourceSet) as T
			} else {
				// manually
				resolvedChange.newValue = newRootObject
			}
			
			resolvedChange.resource = resourceSet.getResource(uri, false)
			
			if (resolvedChange.newValue != null && !resolvedChange.newValue.eIsProxy 
				&& resolvedChange.resource != null) {
				return resolvedChange
			}
		}
		return this
	}
}

class RemoveRootEObject<T extends EObj> extends RootEChange, EObjectSubtractedEChange<T> {
	op boolean isResolved() {
		return !oldValue.eIsProxy()
	}
	op EChange resolve(ResourceSet resourceSet) {
		return this.resolve(resourceSet, null)
	}
	op EChange resolve(ResourceSet resourceSet, T oldRootObject) {
		if (!isResolved) {
			val resolvedChange = super.resolve(resourceSet) as RemoveRootEObject<T>
			if (resolvedChange == null) {
				// Resolving the super class attributes failed
				return null
			}
			
			// Resolve the root object
			if (oldRootObject == null) {
				// In given resource set
				resolvedChange.oldValue = EChangeUtil.resolveProxy(oldValue, resourceSet) as T
			} else  {
				// manually
				resolvedChange.oldValue = oldRootObject
			}
					
			// Get resource where the root object will be removed 
			resolvedChange.resource = resourceSet.getResource(uri, false)
			
			if (resolvedChange.oldValue != null && !resolvedChange.oldValue.eIsProxy
				&& resolvedChange.resource != null) {
				return resolvedChange
			}
		}
	}
}