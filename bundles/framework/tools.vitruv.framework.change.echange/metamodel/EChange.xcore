@Ecore(nsURI="http://tools.vitruv/EChange/1.0")
@GenModel(modelName="Change",prefix="EChange") //@GenModel(prefix="EChange", editDirectory="/tools.vitruv.framework.change.echange.edit/src", editorDirectory="/tools.vitruv.framework.change.echange.editor/src", modelName="Change", modelPluginClass="", editPluginClass="tools.vitruv.framework.change.provider.ChangeEditPlugin", editorPluginClass="tools.vitruv.framework.change.echange.presentation.ChangeEditorPlugin", testsDirectory="tools.vitruv.framework.change.echange.tests/src", testSuiteClass="tools.vitruv.framework.change.echange.tests.ChangeAllTests", importerID="org.eclipse.emf.importer.ecore", editorPluginID="tools.vitruv.framework.change.echange.editor", testsPluginID="tools.vitruv.framework.change.echange.tests")
package tools.vitruv.framework.change.echange

import org.eclipse.emf.common.command.Command
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.emf.ecore.util.EcoreUtil
import tools.vitruv.framework.change.echange.util.ApplyCommandSwitch
import tools.vitruv.framework.change.echange.util.RevertCommandSwitch

type Command wraps Command
type ResourceSet wraps ResourceSet

abstract class EChange {
	/**
	 * Returns if all proxy EObjects of the change are resolved to concrete EObjects of a resource set.
	 * Needs to be true to apply or revert the change.
	 * @return	All proxy EObjects are resolved to concrete EObjects.
	 */
	op boolean isResolved() {
		return true
	}
	
	/**
	 * Resolves the unresolved proxy EObjects of the change to a given set of resources with concrete EObjects.
	 * The model has to be in state before the change will applied. If the model is in state after the
	 * change and it will be reverted, {@link resolveRevert} has to be called instead.
	 * Before the change can be applied or reverted all proxy objects need to be resolved.
	 * @param 	resourceSet The {@code ResourceSet} which contains the concrete EObjects the proxy objects of
	 * 			the unresolved should be resolved to.
	 * @return 	A new resolved change which EObjects references to concrete elements in the 
	 * 			given {@code ResourceSet}. The returned class is the same as the resolved one.
	 * 			If not all proxy objects could be resolved it returns the original unresolved change.
	 * 			Returns {@code null} if {@link resourceSet} is {@code null}.
	 */
	op EChange resolveApply(ResourceSet resourceSet) {
		if (resourceSet == null) {
			return null
		}
		if (!isResolved) {
			return EcoreUtil.copy(this)
		}
		return this
	}
	
	op EChange resolveRevert(ResourceSet resourceSet) {
		resolveApply(resourceSet)
	}
	
	/**
	 * Applies the change to the model which the change was resolved to.
	 * The change must be resolved before it can be applied.
	 * @return	Returns whether the change was successfully applied. If the 
	 * 			change was not resolved or could not be applied it returns {@code false}
	 */
	op boolean apply() {
		if (isResolved) {
			val commands = (new ApplyCommandSwitch()).doSwitch(this)
			if (commands != null) {
				for (Command c : commands) {
					if (c.canExecute()) {
						c.execute()
					} else {
						return false
					}
				}
				return true
			}
		}
		return false
	}
	
	/**
	 * Reverts the change on the model which the change was resolved to.
	 * The change must be resolved before it can be reverted.
	 * @return	Returns whether the change was successfully reverted. If the
	 * 			change was not resolved or could not be reverted it returns {@code false}
	 */
	op boolean revert() {
		if (isResolved) {
			val commands = (new RevertCommandSwitch()).doSwitch(this)
			if (commands != null) {
				for (Command c : commands) {
					if (c.canExecute()) {
						c.execute()
					} else {
						return false
					}
				}
				return true
			}
		}
		return false
	}
}

abstract class AtomicEChange extends EChange {
}

abstract class AdditiveEChange<T extends Object> extends AtomicEChange {
	op T[1] getNewValue()
}

abstract class SubtractiveEChange<T extends Object> extends AtomicEChange {
	op T[1] getOldValue()
}