@Ecore(nsURI="http://tools.vitruv/EChange/Feature/Reference/Containment/1.0")
@GenModel(modelName="Change") //@GenModel(editDirectory="/tools.vitruv.framework.change.echange.edit/src", editorDirectory="/tools.vitruv.framework.change.echange.editor/src", modelName="Change", modelPluginClass="", editPluginClass="tools.vitruv.framework.change.provider.ChangeEditPlugin", editorPluginClass="tools.vitruv.framework.change.echange.presentation.ChangeEditorPlugin", testsDirectory="tools.vitruv.framework.change.echange.tests/src", testSuiteClass="tools.vitruv.framework.change.echange.tests.ChangeAllTests", importerID="org.eclipse.emf.importer.ecore", editorPluginID="tools.vitruv.framework.change.echange.editor", testsPluginID="tools.vitruv.framework.change.echange.tests")
package tools.vitruv.framework.change.echange.feature.reference

import org.eclipse.emf.common.command.Command
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.emf.ecore.util.EcoreUtil
import tools.vitruv.framework.change.echange.util.EChangeUtil
import tools.vitruv.framework.change.echange.EChange
import tools.vitruv.framework.change.echange.eobject.EObjectAddedEChange
import tools.vitruv.framework.change.echange.eobject.EObjectSubtractedEChange
import tools.vitruv.framework.change.echange.feature.FeatureEChange
import tools.vitruv.framework.change.echange.feature.list.InsertInListEChange
import tools.vitruv.framework.change.echange.feature.list.RemoveFromListEChange
import tools.vitruv.framework.change.echange.feature.single.ReplaceSingleValuedFeatureEChange

type EObj wraps EObject
type ResourceSet wraps ResourceSet
type Command wraps Command

abstract class UpdateReferenceEChange<A extends EObject> extends FeatureEChange<A, EReference> {
	op boolean[1] isContainment() {
		return getAffectedFeature().isContainment()
	}
}

abstract class AdditiveReferenceEChange<A extends EObj, T extends EObj> extends UpdateReferenceEChange<A>, EObjectAddedEChange<T> {
}

abstract class SubtractiveReferenceEChange<A extends EObj, T extends EObj> extends UpdateReferenceEChange<A>, EObjectSubtractedEChange<T> {
}

class InsertEReference<A extends EObj, T extends EObj> extends InsertInListEChange<A, EReference, T>, AdditiveReferenceEChange<A, T> {
	op boolean isResolved() {
		return super.isResolved() && 
			(newValue == null || !newValue.eIsProxy())
	}
	op EChange resolve(ResourceSet resourceSet) {
		if (!isResolved) {
			val resolvedChange = super.resolve(resourceSet) as InsertEReference<A, T>
			if (resolvedChange == null) {
				// Resolving of super class attributes failed
				return null
			}
					
			resolvedChange.newValue = EChangeUtil.resolveProxy(newValue, resourceSet) as T				

			if (resolvedChange.newValue == null || !resolvedChange.newValue.eIsProxy) {
				return resolvedChange
			} 
		} 
		return this
	}
}

class RemoveEReference<A extends EObj, T extends EObj> extends RemoveFromListEChange<A, EReference, T>, SubtractiveReferenceEChange<A, T> {
	op boolean isResolved() {
		return super.isResolved() && 
			(oldValue == null || !oldValue.eIsProxy())
	}
	op EChange resolve(ResourceSet resourceSet) {
		if (!isResolved) {
			val resolvedChange = super.resolve(resourceSet) as RemoveEReference<A, T>
			if (resolvedChange == null) {
				// Resolving of super class attributes failed
				return null
			}
			
			resolvedChange.oldValue = EChangeUtil.resolveProxy(oldValue, resourceSet) as T				
			
			if (resolvedChange.oldValue == null || !resolvedChange.oldValue.eIsProxy) {
				return resolvedChange
			}
		} 
		return this
	}
}

class ReplaceSingleValuedEReference<A extends EObj, T extends EObj> extends  ReplaceSingleValuedFeatureEChange<A, EReference, T>, AdditiveReferenceEChange<A, T>, SubtractiveReferenceEChange<A, T> {
	op boolean isResolved() {
		return super.isResolved() &&
			(oldValue == null || !oldValue.eIsProxy()) &&
			(newValue == null || !newValue.eIsProxy())
	}
	op EChange resolve(ResourceSet resourceSet) {
		if (!isResolved) {
			val resolvedChange = super.resolve(resourceSet) as ReplaceSingleValuedEReference<A, T>
			if (resolvedChange == null) {
				// Resolving of super class attributes failed
				return null
			}
			
			resolvedChange.oldValue = EChangeUtil.resolveProxy(oldValue, resourceSet) as T
			resolvedChange.newValue = EChangeUtil.resolveProxy(newValue, resourceSet) as T				

			if ((resolvedChange.newValue == null || !resolvedChange.newValue.eIsProxy)
				&& (resolvedChange.oldValue == null || !resolvedChange.oldValue.eIsProxy)) {
				return resolvedChange
			}
		} 
		return this
	}
}