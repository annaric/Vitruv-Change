@Ecore(nsURI="http://tools.vitruv/EChange/EObject/1.0")
@GenModel(modelName="Change") //@GenModel(editDirectory="/tools.vitruv.framework.change.echange.edit/src", editorDirectory="/tools.vitruv.framework.change.echange.editor/src", modelName="Change", modelPluginClass="", editPluginClass="tools.vitruv.framework.change.provider.ChangeEditPlugin", editorPluginClass="tools.vitruv.framework.change.echange.presentation.ChangeEditorPlugin", testsDirectory="tools.vitruv.framework.change.echange.tests/src", testSuiteClass="tools.vitruv.framework.change.echange.tests.ChangeAllTests", importerID="org.eclipse.emf.importer.ecore", editorPluginID="tools.vitruv.framework.change.echange.editor", testsPluginID="tools.vitruv.framework.change.echange.tests")
package tools.vitruv.framework.change.echange.eobject

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.emf.ecore.InternalEObject
import org.eclipse.emf.ecore.util.EcoreUtil
import tools.vitruv.framework.change.echange.EChange
import tools.vitruv.framework.change.echange.AtomicEChange
import tools.vitruv.framework.change.echange.AdditiveEChange
import tools.vitruv.framework.change.echange.SubtractiveEChange
import tools.vitruv.framework.change.echange.util.EChangeUtil
import tools.vitruv.framework.change.echange.util.StagingArea

type EObj wraps EObject
type ResourceSet wraps ResourceSet
type Resource wraps Resource

abstract class EObjectAddedEChange<T extends EObj> extends AdditiveEChange<T> {
	refers T[1] newValue
}

abstract class EObjectSubtractedEChange<T extends EObj> extends SubtractiveEChange<T> {
	refers T[1] oldValue
}

abstract class EObjectExistenceEChange<A extends EObj> extends AtomicEChange {
	refers A[1] affectedEObject
	Resource stagingArea
	
	op boolean isResolved() {
		return super.isResolved() && affectedEObject != null && !affectedEObject.eIsProxy()
			&& stagingArea != null
	}
	op EChange resolve(ResourceSet resourceSet, boolean newObject) {
		if (affectedEObject != null && !isResolved) {
			val resolvedChange = super.resolveApply(resourceSet) as EObjectExistenceEChange<A>
			if (resolvedChange == null) {
				// resolving the super class attributes failed
				return null
			}
			
			// Resolve the affected object
			if (newObject) {
				// Create new one
				resolvedChange.affectedEObject = EcoreUtil.copy(affectedEObject)
				(resolvedChange.affectedEObject as InternalEObject).eSetProxyURI(null)		
			} else {
				// Object still exists
				resolvedChange.affectedEObject = EChangeUtil.objectInProgress as A
			}
			
			// Get the staging area where the created object will placed in.
			resolvedChange.stagingArea = StagingArea.getStagingArea(resourceSet)
			
			if (resolvedChange.affectedEObject != null && !resolvedChange.affectedEObject.eIsProxy
				&& resolvedChange.stagingArea != null) {
				if (newObject) {
					// Set object in progress, so other changes which will be resolved 
					// has access to the created object.
					EChangeUtil.objectInProgress = resolvedChange.affectedEObject
				} else {
					// Object will be deleted
					EChangeUtil.objectInProgress = null
				}
				return resolvedChange
			}
		}
		return this
	}
}

class CreateEObject<A extends EObj> extends EObjectExistenceEChange<A> {
	op EChange resolveApply(ResourceSet resourceSet) {
		resolve(resourceSet, true)
	}
	op EChange resolveRevert(ResourceSet resourceSet) {
		resolve(resourceSet, false)
	}
}

class DeleteEObject<A extends EObj> extends EObjectExistenceEChange<A> {
	op EChange resolveApply(ResourceSet resourceSet) {
		resolve(resourceSet, false)
	}
	op EChange resolveRevert(ResourceSet resourceSet) {
		resolve(resourceSet, true)
	}	
}